USE master;
GO
DROP DATABASE IF EXISTS ev_battery_trading;
GO
CREATE DATABASE ev_battery_trading;
GO
USE ev_battery_trading;
GO

-- ========================
-- 01. users
-- ========================
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    full_name NVARCHAR(100) NOT NULL,
    email NVARCHAR(100) UNIQUE NOT NULL,
    password_hash NVARCHAR(255) NOT NULL,
    gender NVARCHAR(50),
    year_of_birth DATE DEFAULT NULL,
    phone NVARCHAR(20),
    avatar_profile NVARCHAR(500) DEFAULT NULL,
    role NVARCHAR(20) CHECK (role IN ('buyer', 'seller', 'staff', 'manager')) NOT NULL,
    kyc_status NVARCHAR(20) CHECK (kyc_status IN ('not_submitted', 'pending', 'approved', 'rejected')) DEFAULT 'not_submitted',
    account_status NVARCHAR(20) CHECK (account_status IN ('warning1', 'warning2', 'ban', 'active')) DEFAULT 'active',
    created_at DATE DEFAULT GETDATE(),
    updated_at DATE DEFAULT GETDATE(),
    is_deleted BIT DEFAULT 0
);

-- ========================
-- 02. address
-- ========================
CREATE TABLE addresses (
    address_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    recipient_name NVARCHAR(100) NOT NULL,
    phone NVARCHAR(20) NOT NULL,
    street NVARCHAR(255) NOT NULL,
    ward NVARCHAR(100),
    district NVARCHAR(100),
    province NVARCHAR(100),
    is_default BIT DEFAULT 0,
    created_at DATE DEFAULT GETDATE(),
    is_deleted BIT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ========================
-- 03. categories
-- ========================
CREATE TABLE categories (
    category_id INT IDENTITY(1,1) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    description NVARCHAR(MAX)
);

-- ========================
-- 04. items
-- ========================
CREATE TABLE items (
    item_id INT IDENTITY(1,1) PRIMARY KEY,
    item_type NVARCHAR(20) CHECK (item_type IN ('ev', 'battery')),
    category_id INT,
    title NVARCHAR(200) NOT NULL,
    description NVARCHAR(MAX),
    price DECIMAL(18,2),
    quantity INT DEFAULT 1,
    status NVARCHAR(20) CHECK (status IN ('active', 'sold', 'pending', 'rejected')),
    created_at DATE DEFAULT GETDATE(),
    updated_at DATE DEFAULT GETDATE(),
    updated_by INT,
    is_deleted BIT DEFAULT 0,
    FOREIGN KEY (category_id) REFERENCES categories(category_id),
    FOREIGN KEY (updated_by) REFERENCES users(user_id)
);

-- ========================
-- 05. ev_details
-- ========================
CREATE TABLE ev_details (
    item_id INT PRIMARY KEY,
    brand NVARCHAR(100),
    model NVARCHAR(100),
    version NVARCHAR(255),
    year INT,
    body_style VARCHAR(100),
    color VARCHAR(50),
    license_plate VARCHAR(20) UNIQUE,
    has_accessories BIT DEFAULT 0,
    previous_owners INT DEFAULT 1,
    is_registration_valid BIT DEFAULT 0,
    mileage INT,
    updated_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 06. battery_details
-- ========================
CREATE TABLE battery_details (
    item_id INT PRIMARY KEY,
    brand NVARCHAR(100),
    capacity INT,
    voltage DECIMAL(5,2),
    charge_cycles INT,
    updated_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 07. item_images
-- ========================
CREATE TABLE item_images (
    image_id INT IDENTITY(1,1) PRIMARY KEY,
    item_id INT NOT NULL,
    image_url NVARCHAR(500),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 08. favorites
-- ========================
CREATE TABLE favorites (
    fav_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    item_id INT NOT NULL,
    created_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 09. orders
-- ========================
CREATE TABLE orders (
    order_id INT IDENTITY(1,1) PRIMARY KEY,
    buyer_id INT NOT NULL,
    address_id INT NOT NULL,
    status NVARCHAR(20) CHECK (status IN ('pending', 'paid', 'shipped', 'completed', 'canceled')),
    created_at DATE DEFAULT GETDATE(),
    updated_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (buyer_id) REFERENCES users(user_id),
    FOREIGN KEY (address_id) REFERENCES addresses(address_id)
);

-- ========================
-- 10. order_items
-- ========================
CREATE TABLE order_items (
    order_item_id INT IDENTITY(1,1) PRIMARY KEY,
    order_id INT NULL, – khi nào muốn mua sẽ chèn order_id vào khúc này, còn không thì phần này sẽ null
    item_id INT NOT NULL,
    quantity INT DEFAULT 1,
    price DECIMAL(18,2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 11. payments
-- ========================
CREATE TABLE payments (
    payment_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    order_code BIGINT UNIQUE NOT NULL,
    total_amount DECIMAL(18,2) NOT NULL,
    currency NVARCHAR(10) DEFAULT 'vnd',
    method NVARCHAR(50) NOT NULL,
    status NVARCHAR(20) CHECK (status IN ('pending', 'completed', 'failed', 'refunded', 'expired')) NOT NULL,
    expired_at DATETIME NULL,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ========================
-- 12. reviews
-- ========================
CREATE TABLE reviews (
    review_id INT IDENTITY(1,1) PRIMARY KEY,
    reviewer_id INT NOT NULL,
    target_user_id INT NOT NULL,
    item_id INT NOT NULL,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at DATE DEFAULT GETDATE(),
    updated_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (reviewer_id) REFERENCES users(user_id),
    FOREIGN KEY (target_user_id) REFERENCES users(user_id),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 13. review_images
-- ========================
CREATE TABLE review_images (
    image_id INT IDENTITY(1,1) PRIMARY KEY,
    review_id INT NOT NULL,
    image_url NVARCHAR(500),
    FOREIGN KEY (review_id) REFERENCES reviews(review_id)
);

-- ========================
-- 14. user_logs
-- ========================
CREATE TABLE user_logs (
    log_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    action NVARCHAR(200),
    details NVARCHAR(MAX),
    created_at DATE DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ========================
-- 15. kyc_documents
-- ========================
CREATE TABLE kyc_documents (
    doc_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    id_card_url NVARCHAR(500) NULL,
    vehicle_registration_url NVARCHAR(500) NULL,
    selfie_url NVARCHAR(500) NULL,
    doc_url NVARCHAR(500),
    submitted_at DATETIME DEFAULT GETDATE(),
    verified_by INT NULL,
    verified_at DATETIME NULL,
    status NVARCHAR(20) CHECK (status IN ('pending', 'approved', 'rejected')) DEFAULT 'pending',
    note NVARCHAR(MAX),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (verified_by) REFERENCES users(user_id)
);

-- ========================
-- 16. blogs
-- ========================
CREATE TABLE blogs (
    blog_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    title NVARCHAR(255),
    publish_date DATE,
    category NVARCHAR(100),
    summary NVARCHAR(MAX),
    author_id INT NOT NULL,
    thumbnail_url NVARCHAR(255),
    content NVARCHAR(MAX),
    tags NVARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ========================
-- 17. auctions
-- ========================
CREATE TABLE auctions (
    auction_id INT IDENTITY(1,1) PRIMARY KEY,
    item_id INT NOT NULL UNIQUE,
    starting_price DECIMAL(18,2) NOT NULL,
    current_price DECIMAL(18,2) NULL,
    total_bids INT DEFAULT 0,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    status NVARCHAR(20) CHECK (status IN ('upcoming','ongoing','ended','cancelled')) DEFAULT 'upcoming',
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (item_id) REFERENCES items(item_id) ON DELETE CASCADE
);

-- ========================
-- 18. bids
-- ========================
CREATE TABLE bids (
    bid_id INT IDENTITY(1,1) PRIMARY KEY,
    auction_id INT NOT NULL,
    user_id INT NOT NULL,
    bid_amount DECIMAL(18,2) NOT NULL,
    bid_time DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (auction_id) REFERENCES auction(auction_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    INDEX idx_auction_user (auction_id, user_id),
    INDEX idx_auction_amount (auction_id, bid_amount DESC)
);

-- ========================
-- 19. wallets
-- ========================
CREATE TABLE wallets (
    wallet_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    balance DECIMAL(18,2) NOT NULL DEFAULT 0,
    currency NVARCHAR(10) DEFAULT 'vnd',
    status NVARCHAR(20) CHECK (status IN ('active', 'frozen')) DEFAULT 'active',
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- ========================
-- 20. wallet_transactions
-- ========================
CREATE TABLE wallet_transactions (
    transaction_id INT IDENTITY(1,1) PRIMARY KEY,
    wallet_id INT NOT NULL,
    amount DECIMAL(18,2) NOT NULL,
    type NVARCHAR(20) CHECK (type IN ('deposit', 'withdraw', 'hold', 'release', 'payment')) NOT NULL,
    ref_id INT NULL,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (wallet_id) REFERENCES wallets(wallet_id)
);

-- ========================
-- 21. payment_details
-- ========================
CREATE TABLE payment_details (
    payment_detail_id INT IDENTITY(1,1) PRIMARY KEY,
    payment_id INT NOT NULL,
    order_id INT NULL,
    item_id INT NULL,
    amount DECIMAL(18,2) NOT NULL,
    FOREIGN KEY (payment_id) REFERENCES payments(payment_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (item_id) REFERENCES items(item_id)
);

-- ========================
-- 22. commission_fee_rules
-- ========================
CREATE TABLE commission_fee_rules (
    rule_id INT IDENTITY(1,1) PRIMARY KEY,
    fee_code NVARCHAR(50) NOT NULL UNIQUE,
    fee_name NVARCHAR(100) NOT NULL,
    target_role NVARCHAR(20) CHECK (target_role IN ('buyer', 'seller', 'all')) DEFAULT 'seller',
    fee_type NVARCHAR(20) CHECK (fee_type IN ('percentage', 'fixed')) NOT NULL,
    fee_value DECIMAL(10,2) NOT NULL,
    effective_from DATETIME DEFAULT GETDATE(),
    effective_to DATETIME NULL,
    is_active BIT DEFAULT 1,
    created_at DATETIME DEFAULT GETDATE()
);

-- ========================
-- 23. transaction_commissions
-- ========================
CREATE TABLE transaction_commissions (
    id INT IDENTITY(1,1) PRIMARY KEY,
    transaction_id INT NOT NULL,
    rule_id INT NOT NULL,
    applied_value DECIMAL(18,2) NOT NULL,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (rule_id) REFERENCES commission_fee_rules(rule_id),
    FOREIGN KEY (transaction_id) REFERENCES wallet_transactions(transaction_id)
);


